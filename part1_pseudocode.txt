
Write argparse code to input filename/location as a variable.

Create a dictionary with the UMIs as keys, the alignment positions including strandedness associated with them will be the values. This will be a list of UMI alignment pairs.

There will also be a list of possible UMI that will be used to check for sequencing error.

Open file:

	Iterate through the file line by line AKA read by read
	
	For each read:
		-Parse the cigar string and adjust the alignment position if soft clipping is present.

		-check to see if UMI/Randomer is a result of sequencing error.
			if it is, immediately move to next read skipping other checks, else continue to checking pair.
		
		-check to see of the UMI and the corrected alignment position including strandedness are a pair in the dictionary.
			if not, move to next read, else output SAM line to new SAM file.

Function Headers

def cigar_parse(cigar_string, alignment_pos):
	if soft clipping present?
		what strand?
		correct alignment position
	else
		do nothing
	return corrected alignment position
	
def check_UMI(UMI, UMI_list):
	look for UIM in UMI_list
	return True or False
	
def check_pair(UMI, corrected alignment_pos):
	is UMI alignment_pos key value pair in the dictionary
	if true
		throw out and move to next read
	if false
		output SAM line to new SAM output file

	
